/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _ABSTRACTMYSTUBSERVER_H_
#define _ABSTRACTMYSTUBSERVER_H_

#include <jsonrpc/rpc.h>

class AbstractMyStubServer : public jsonrpc::AbstractServer<AbstractMyStubServer>
{
    public:
        AbstractMyStubServer(jsonrpc::AbstractServerConnector* conn) :
            jsonrpc::AbstractServer<AbstractMyStubServer>(conn) 
        {
            this->bindAndAddMethod(new jsonrpc::Procedure("AddNicoNicoMsg", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "msg",jsonrpc::JSON_STRING, NULL), &AbstractMyStubServer::AddNicoNicoMsgI);
            this->bindAndAddMethod(new jsonrpc::Procedure("ClearAll", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "arg",jsonrpc::JSON_INTEGER, NULL), &AbstractMyStubServer::ClearAllI);
            this->bindAndAddMethod(new jsonrpc::Procedure("RemoveScrollingMessage", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "name",jsonrpc::JSON_STRING, NULL), &AbstractMyStubServer::RemoveScrollingMessageI);
            this->bindAndAddMethod(new jsonrpc::Procedure("RemoveStaticMessage", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "name",jsonrpc::JSON_STRING, NULL), &AbstractMyStubServer::RemoveStaticMessageI);
            this->bindAndAddMethod(new jsonrpc::Procedure("ScrollingMessage", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "msg",jsonrpc::JSON_STRING,"name",jsonrpc::JSON_STRING,"repetitions",jsonrpc::JSON_INTEGER,"scroll_time",jsonrpc::JSON_REAL,"y",jsonrpc::JSON_INTEGER, NULL), &AbstractMyStubServer::ScrollingMessageI);
            this->bindAndAddMethod(new jsonrpc::Procedure("StaticMessage", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "h",jsonrpc::JSON_INTEGER,"lifetime",jsonrpc::JSON_REAL,"msg",jsonrpc::JSON_STRING,"name",jsonrpc::JSON_STRING,"w",jsonrpc::JSON_INTEGER,"x",jsonrpc::JSON_INTEGER,"y",jsonrpc::JSON_INTEGER, NULL), &AbstractMyStubServer::StaticMessageI);

        }
        
        inline virtual void AddNicoNicoMsgI(const Json::Value& request, Json::Value& response) 
        {
            response = this->AddNicoNicoMsg(request["msg"].asString());
        }

        inline virtual void ClearAllI(const Json::Value& request, Json::Value& response) 
        {
            response = this->ClearAll(request["arg"].asInt());
        }

        inline virtual void RemoveScrollingMessageI(const Json::Value& request, Json::Value& response) 
        {
            response = this->RemoveScrollingMessage(request["name"].asString());
        }

        inline virtual void RemoveStaticMessageI(const Json::Value& request, Json::Value& response) 
        {
            response = this->RemoveStaticMessage(request["name"].asString());
        }

        inline virtual void ScrollingMessageI(const Json::Value& request, Json::Value& response) 
        {
            response = this->ScrollingMessage(request["msg"].asString(), request["name"].asString(), request["repetitions"].asInt(), request["scroll_time"].asDouble(), request["y"].asInt());
        }

        inline virtual void StaticMessageI(const Json::Value& request, Json::Value& response) 
        {
            response = this->StaticMessage(request["h"].asInt(), request["lifetime"].asDouble(), request["msg"].asString(), request["name"].asString(), request["w"].asInt(), request["x"].asInt(), request["y"].asInt());
        }


        virtual std::string AddNicoNicoMsg(const std::string& msg) = 0;
        virtual std::string ClearAll(const int& arg) = 0;
        virtual std::string RemoveScrollingMessage(const std::string& name) = 0;
        virtual std::string RemoveStaticMessage(const std::string& name) = 0;
        virtual std::string ScrollingMessage(const std::string& msg, const std::string& name, const int& repetitions, const double& scroll_time, const int& y) = 0;
        virtual std::string StaticMessage(const int& h, const double& lifetime, const std::string& msg, const std::string& name, const int& w, const int& x, const int& y) = 0;

};
#endif //_ABSTRACTMYSTUBSERVER_H_
