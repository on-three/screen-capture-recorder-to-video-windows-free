#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set ts=2 expandtab:
'''
Module: static_msg
Desc: add or remove a static message on a video stream via JSON RPC calls
Author: on_three
Email: on.three.email@gmail.com
DATE: Friday, June6th 2014
  
'''

import pyjsonrpc
import argparse
import sys

def main():
  parser = argparse.ArgumentParser(description='Add or remove a scrolling message on a video stream.')
  parser.add_argument('message_name', help='Friendly name to remove/change this message later.', type=str)
  parser.add_argument('-m', '--message', help='Text to display on video stream scrolling msg', type=str)
  parser.add_argument('-u', '--url', help='URL of json RPC server to invoke commands on in form IP:PORT.', type=str, default='http://localhost:8080')
  parser.add_argument('-f', '--font', help='Pangocairo font family and size.', type=str, default='Sans Bold 12')
  parser.add_argument('-x', '--xpos', help='Time in seconds to scroll text across screen.', type=int, default=20)
  parser.add_argument('-y', '--ypos', help='Vertical y pos of scrolling text in pixels.', type=int, default=20)
  parser.add_argument('-t', '--timeout', help='Show message for X seconds.', type=float, default=0.0)
  parser.add_argument('-s', '--dropshadow', help='Black text dropshadow added.', action='store_true')
  parser.add_argument('-b', '--underlay', help='Background shaded underlay to make reading clearer.', action='store_true')
  parser.add_argument('-d', '--delete', help='Delte scrolling message via the provided message name.', action='store_true')

  args = parser.parse_args()

  if not args.delete and not args.message:
    print('Please provide a message to display using the -m option.')
    sys.exit(-1)

  http_client = pyjsonrpc.HttpClient(
    url = args.url,
    #username = 'Username',
    #password = 'Password',
  )

  msg = args.message
  font = args.font
  x = args.xpos
  y = args.ypos
  friendly_name = args.message_name
  dropshadow = args.dropshadow
  underlay = args.underlay
  timeout = args.timeout

  if args.delete:
    print 'removing'
    response = http_client.remove_msg(friendly_name=friendly_name)
  else:
    response = http_client.add_msg(msg=msg, font=font, friendly_name=friendly_name, y=y, x=x, timeout=timeout, dropshadow=dropshadow, underlay=underlay)

  print('Response from server: {r}'.format(r=response))
    

if __name__ == "__main__":
  main()
